from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ContentType, ParseMode
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from os import environ as env
from Functions import *
from DataBase import *
from Buttons import *
import logging

"""–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –±–æ—Ç–æ–º"""
"""–ù—É–∂–Ω–æ –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º –µ—â–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å"""

logging.basicConfig(level=logging.INFO)
bot = Bot(token=env['TOKEN'])
storage = MemoryStorage()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ
dp = Dispatcher(bot, storage=storage)


class States(StatesGroup):
    first = State()
    second = State()
    third = State()
    fourth = State()
    fifth = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext) -> None:
    await state.finish()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    cur.execute("SELECT user_id FROM telegram")
    if message.from_user.id not in [user[0] for user in cur.fetchall()]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è id –≤ –±–∞–∑–µ
        cur.execute("INSERT INTO telegram VALUES (?, ?)",
                    (message.from_user.id, message.from_user.username))
        con.commit()
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! üñê\n'
                 f'–¢—É—Ç –¥–∞–ª—å—à–µ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç',
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            text=f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!üñê',
            parse_mode=ParseMode.HTML
        )


@dp.message_handler(commands=['help'], state=None)
async def cmd_help(message: types.Message) -> None:
    await message.answer(text=f'–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é:\n'
                              f'–¢—É—Ç –∫–æ–º–∞–Ω–¥—ã')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
@dp.message_handler(content_types=ContentType.ANY, state='*')
async def any_text(message: types.Message) -> None:
    await bot.send_message(
        chat_id=message.from_user.id,
        text=f'–Ø –Ω–µ –ø–æ–Ω—è–ª —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤–≤–∏–¥—É, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help, '
             f'—á—Ç–æ –±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã'
    )

if __name__ == '__main__':
    executor.start_polling(dp)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
